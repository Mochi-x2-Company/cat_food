//====================================================================
//  C言語 中級プログラミング  例題
//  高速整列算法  ヘッダファイル
//--------------------------------------------------------------------
//  AlgoSort  AlgoSortLib.h
//  Linux  GCC 4.4
//--------------------------------------------------------------------
//  富永研究室  tominaga 富永浩之
//  2015.06.16
//====================================================================


//====================================================================
//  定数定義マクロ
//====================================================================

#define  LEN    1024    // 配列最大長
#define  TRUE   1       // 真値
#define  FALSE  0       // 偽値
#define  THRE   20      // データ数の閾値


//====================================================================
//  データ型名定義
//====================================================================

typedef  int  Bool;        // 真偽値
typedef  int  Data;        // データ


//====================================================================
//  関数宣言
//====================================================================

//--------------------------------------------------------------------
//  要素の比較と交換
//--------------------------------------------------------------------

//----  配列の要素比較
Bool arr_order(Data seq[], int p1, int p2);

//----  配列の要素交換 
void arr_swap(Data seq[], int p1, int p2);

//--------------------------------------------------------------------
//  部分配列の単純整列算法
//--------------------------------------------------------------------

//----  単純選択法
void sel_sort_sub(Data seq[], int low, int hig);      

//----  単純交換法
void exch_sort_sub(Data seq[], int low, int hig);    

//----  単純挿入法
void ins_sort_sub(Data seq[], int low, int hig);      

//--------------------------------------------------------------------
//  間隔指定の前処理による高速整列算法
//--------------------------------------------------------------------

//----  シェルソート
void shell_sort(Data seq[], int n);                  
void shell_sort_run(Data seq[], int low, int hig, int gap);

//----  コームソート
void comb_sort(Data seq[], int n);                  
void comb_sort_run(Data arr[], int low, int hig, int gap);

//--------------------------------------------------------------------
//  分割再帰による高速整列算法
//--------------------------------------------------------------------

//----  クイックソート
void quick_sort(Data seq[], int n);
void quick_sort_rec(Data seq[], int low, int hig);    

//----  マージソート
void merge_sort(Data seq[], int n);                  
void merge_sort_rec(Data seq[], int low, int hig, Data tmp[]);    

//----  ヒープソート
void heap_sort(Data seq[], int n);                  
void heap_sort_rec(Data seq[], int up, int lst);
void heap_sort_run(Data seq[], int up, int lst);

//--------------------------------------------------------------------
//  配列の入出力
//--------------------------------------------------------------------

//----  配列への入力
void input_arr(Data arr[], int n);                

//----  配列からの出力
void output_arr(Data arr[], int n);               
