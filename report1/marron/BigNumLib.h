//====================================================================
//  工学部「情報算法２」(富永)  例題
//  多倍長整数の計算  四則演算の関数宣言
//--------------------------------------------------------------------
//  BigNum  BigNumLib.h
//  ヘッダ
//  Linux  GCC
//--------------------------------------------------------------------
//  富永研究室  tominaga 富永浩之
//  2018.06.05  v3.0
//====================================================================


//====================================================================
//  仕様
//====================================================================

/*--------------------------------------------------------------------

多倍長整数を、4桁を1節とし、10000進数で実装する。
すなわち、1234 5678 や 12 0034 のように、4桁ごとに区切って、
多倍長整数を扱う。10000進数による計算と同等である。
12 0034 は、内部的には、12 34 として格納されるが、入出力においては、
内部の 0 を埋めて扱う。ただし、最上位に 0012 のように、0 を埋めない。

多倍長整数は、節数や桁数も保持した配列として、構造体 BigNum で定義する。
多倍長整数としての節数と、実際の桁数を混同しない。
例えば、12 3456 は、節数 2 で、桁数 6 である。
0 は、特別に扱い、節数 1 で、桁数 0 とする。

四則演算では、計算範囲の吟味を行い、正常計算かどうかを返却する。
四則演算の結果は、ポインタ引数に格納する。
除算は、整除演算とし、整商と剰余を同時に計算する。

--------------------------------------------------------------------*/


//====================================================================
//  前処理
//====================================================================

//--------------------------------------------------------------------
//  ヘッダ指定
//--------------------------------------------------------------------

#include <stdio.h>

//--------------------------------------------------------------------
//  定数定義マクロ
//--------------------------------------------------------------------

#define  NMX        100    // 多倍長の節数
#define  RAD  100000000    // 基数
#define  WID          8    // 各節の桁数
#define  TEN         10    // 10

//--------------------------------------------------------------------
//  データ型名定義
//--------------------------------------------------------------------

typedef  enum {FALSE, TRUE}  Bool;    // 真偽値

typedef  struct _BigNum  BigNum;     // 多倍長整数
struct _BigNum {
  int nsz;         // 節数
  int dsz;         // 桁数
  long long int node[NMX];   // 各節の値
};


//====================================================================
//  大域宣言
//====================================================================

//--------------------------------------------------------------------
//  関数宣言  多倍長整数の入出力 BigNumLib
//--------------------------------------------------------------------

//--  多倍長整数の入力
Bool bignum_input(BigNum *n);

//--  多倍長整数の出力
void bignum_output(const BigNum n);


//--------------------------------------------------------------------
//  関数宣言  多倍長整数の補助計算 BigNumLib
//--------------------------------------------------------------------

//--  多倍長整数の正規化 (節値と範囲の正規化)
Bool bignum_normal(BigNum *b0); 

//--  多倍長整数の初期化(単倍長整数の多倍長化)
Bool bignum_init(BigNum *b, int a, int p);

//--  多倍長整数の節値の正規化(繰上り・繰下りの清算)
Bool bignum_carry(BigNum *b);

//--  多倍長整数の正規化(次数と桁数の格納)
Bool bignum_size(BigNum *b);

//--  多倍長整数の正規化(次数と桁数の格納)
void bignum_chk(BigNum *b);

//--  多倍長整数の大小比較
int bignum_cmp(BigNum b1, BigNum b2);

//--  多倍長整数の零判定
Bool bignum_zero(BigNum b);

//--  多倍長の近傍判定
Bool bignum_near(BigNum b1, BigNum b2, int a);

//--  多倍長整数の桁移動
Bool bignum_shift(BigNum *b, int s);

//--  多倍長整数の部分複写
Bool bignum_copy(BigNum b1, int p, int d, BigNum *b0);

//-- 多倍長整数の順序判定
Bool bignum_within(BigNum b1, BigNum b2, BigNum b3);

//--------------------------------------------------------------------
//  関数宣言  多倍長整数の加減算 BigNumLib
//--------------------------------------------------------------------

//--  多倍長整数の加算
Bool bignum_add(BigNum b1, BigNum b2, BigNum *b0);

//--  多倍長整数の減算
Bool bignum_sub(BigNum b1, BigNum b2, BigNum *b0);

//--  多倍長整数の増分(多倍長整数への単倍長整数の加算更新)
Bool bignum_inc(BigNum *b, int a, int p);


//--------------------------------------------------------------------
//  関数宣言  多倍長整数の乗算 BigNumMlt
//--------------------------------------------------------------------

//--  多倍長整数の多倍長整数による乗算(畳込法)
Bool bignum_mlt(BigNum b1, BigNum b2, BigNum *b0);

//--  多倍長整数の倍分(多倍長整数への単倍長整数の乗算更新)
Bool bignum_scl(BigNum *b, int a);

//--  繰上りの清算
Bool bignum_car(int *p);

//--------------------------------------------------------------------
//  関数宣言  多倍長整数の累乗 BigNumMlt
//--------------------------------------------------------------------

//--  多倍長整数の累乗(二分法)
Bool bignum_pow(BigNum b1, int e, BigNum *b0);

//--  素朴法による多倍長整数の累乗
Bool bignum_pow1(BigNum b1, int e, BigNum *b0);

//--  二分法による多倍長整数の累乗
Bool bignum_pow2(BigNum b1, int e, BigNum *b0);

//-- カラツバ法と二乗法による多倍長整数の累乗
Bool bignum_pow3(BigNum b1, int e, BigNum *b0);

//--  多倍長整数の二乗更新(普通に乗算)
Bool bignum_sq1(BigNum *b0);

//--  多倍長整数の二乗更新(カラツバ法による自己代入)
Bool bignum_sq2(BigNum *b0, int s);

//-- 多倍長整数の部分複写(節の指定位置から指定節数の部分)
Bool bignum_copy(BigNum b1, int p, int u, BigNum *b0);

//--------------------------------------------------------------------
//  関数宣言  多倍長整数の除算 BigNumDiv
//--------------------------------------------------------------------

//--  多倍長整数の除算(整商と剰余)
Bool bignum_div(BigNum b1, BigNum b2, BigNum *b3, BigNum *b4);

//-- 多倍長÷多倍長＝単倍長‥多倍長 (減算法)
Bool bignum_div0(BigNum b1, BigNum b2, int *a3, BigNum *b4);

//--  商立法による多倍長整数の単倍長整数を整商とする除算(整商と剰余)
Bool bignum_div1(BigNum b1, BigNum b2, int *a3, BigNum *b4);

//--  直接法による多倍長整数の単倍長整数による除算(整商と剰余)
Bool bignum_div2(BigNum b1, int a2, BigNum *b3, int *a4);

//--  二分法による多倍長整数の多倍長整数による除算(整商と剰余)
Bool bignum_div3(BigNum b1, BigNum b2, BigNum *b3, BigNum *b4);

//--  商立法による多倍長整数の多倍長整数による除算(整商と剰余)
Bool bignum_div4(BigNum b1, BigNum b2, BigNum *b3, BigNum *b4);

//--  商立法と二分法の組合せによる多倍長整数の多倍長整数による除算(整商と剰余)
Bool bignum_div5(BigNum b1, BigNum b2, BigNum *b3, BigNum *b4);

//  多倍長整数の半分
Bool bignum_half(BigNum *b);


//--------------------------------------------------------------------
//  関数宣言  累乗根 BigNumDiv
//--------------------------------------------------------------------

//--  二分法による平方根の切捨整数値
Bool bignum_sqrt(BigNum b1, BigNum *b0);

//--  二分法による累乗根の切捨整数値
Bool bignum_plrt(BigNum b1, int e, BigNum *b0);


//--------------------------------------------------------------------
//  関数宣言  最大公約数
//--------------------------------------------------------------------

//--  最大公約数(ブレントの算法)
Bool bignum_gcd(BigNum b1, BigNum b2, BigNum *b0);

//--  ブレントの算法による最大公約数
Bool bignum_gcd1(BigNum b1, BigNum b2, BigNum *b0);

//--  ユークリッドの互除法による最大公約数
Bool bignum_gcd2(BigNum b1, BigNum b2, BigNum *b0);
